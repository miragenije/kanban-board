{"ast":null,"code":"import { setListData } from \"../slices/taskSlices\";\nimport { useSelector } from \"react-redux\";\nconst listData = useSelector(state => state.tasks.listData);\nexport const handleDragEnd = result => (dispatch, getState) => {\n  const {\n    source,\n    destination\n  } = result;\n  const state = getState();\n  if (!destination) {\n    return;\n  }\n  if (source.droppableId !== destination.droppableId) {\n    const [sourceCard] = listData.filter(ele => ele.id === source.droppableId);\n    const [destinationCard] = listData.filter(ele => ele.id === destination.droppableId);\n    const sourceList = [...sourceCard.task];\n    const destinationList = [...destinationCard.task];\n    const [removedList] = sourceList.splice(source.index, 1);\n    destinationList.splice(destination.index, 0, removedList);\n    let UpdatedList = listData.map(ele => {\n      if (ele.id === source.droppableId) {\n        return {\n          ...ele,\n          task: sourceList\n        };\n      } else if (ele.id === destination.droppableId) {\n        return {\n          ...ele,\n          task: destinationList\n        };\n      }\n      return ele;\n    });\n    dispatch(setListData(UpdatedList));\n    localStorage.setItem('List', JSON.stringify(UpdatedList));\n  } else {\n    const [sourceCard] = listData.filter(ele => ele.id === source.droppableId);\n    const sourceList = [...sourceCard.task];\n    const [removedList] = sourceList.splice(source.index, 1);\n    sourceList.splice(destination.index, 0, removedList);\n    const UpdatedList = listData.map(ele => {\n      if (ele.id === source.droppableId) {\n        return {\n          ...ele,\n          task: sourceList\n        };\n      }\n      return ele;\n    });\n    dispatch(setListData(UpdatedList));\n    localStorage.setItem('List', JSON.stringify(UpdatedList));\n  }\n};","map":{"version":3,"names":["setListData","useSelector","listData","state","tasks","handleDragEnd","result","dispatch","getState","source","destination","droppableId","sourceCard","filter","ele","id","destinationCard","sourceList","task","destinationList","removedList","splice","index","UpdatedList","map","localStorage","setItem","JSON","stringify"],"sources":["/home/korbendalas/Public/kanban-board-test/src/store/actions/index.js"],"sourcesContent":["import {setListData} from \"../slices/taskSlices\";\nimport {useSelector} from \"react-redux\";\n\nconst listData = useSelector((state)=>state.tasks.listData)\n\nexport const handleDragEnd = (result) => (dispatch, getState) => {\n\n    const { source, destination } = result;\n    const state = getState();\n\n    if (!destination) {\n        return;\n    }\n\n    if (source.droppableId !== destination.droppableId) {\n        const [sourceCard] = listData.filter((ele)=> ele.id === source.droppableId);\n        const [destinationCard] = listData.filter((ele)=> ele.id === destination.droppableId);\n        const sourceList =  [...sourceCard.task];\n        const destinationList = [...destinationCard.task];\n        const [removedList] = sourceList.splice(source.index, 1);\n        destinationList.splice(destination.index, 0, removedList);\n        let UpdatedList = listData.map((ele) => {\n            if(ele.id === source.droppableId){\n                return {...ele, task:sourceList}\n            }\n            else if(ele.id === destination.droppableId){\n                return {...ele, task: destinationList};\n            }\n            return ele;\n        })\n        dispatch(setListData(UpdatedList));\n        localStorage.setItem('List', JSON.stringify(UpdatedList))\n    } else {\n        const [sourceCard] = listData.filter((ele)=> ele.id === source.droppableId);\n        const sourceList =  [...sourceCard.task];\n        const [removedList] = sourceList.splice(source.index, 1);\n        sourceList.splice(destination.index, 0 , removedList);\n        const UpdatedList = listData.map((ele)=>{\n            if(ele.id === source.droppableId){\n                return {...ele, task: sourceList};\n            }\n            return ele;\n        })\n        dispatch(setListData(UpdatedList));\n        localStorage.setItem('List', JSON.stringify(UpdatedList))\n    }\n};\n"],"mappings":"AAAA,SAAQA,WAAW,QAAO,sBAAsB;AAChD,SAAQC,WAAW,QAAO,aAAa;AAEvC,MAAMC,QAAQ,GAAGD,WAAW,CAAEE,KAAK,IAAGA,KAAK,CAACC,KAAK,CAACF,QAAQ,CAAC;AAE3D,OAAO,MAAMG,aAAa,GAAIC,MAAM,IAAK,CAACC,QAAQ,EAAEC,QAAQ,KAAK;EAE7D,MAAM;IAAEC,MAAM;IAAEC;EAAY,CAAC,GAAGJ,MAAM;EACtC,MAAMH,KAAK,GAAGK,QAAQ,CAAC,CAAC;EAExB,IAAI,CAACE,WAAW,EAAE;IACd;EACJ;EAEA,IAAID,MAAM,CAACE,WAAW,KAAKD,WAAW,CAACC,WAAW,EAAE;IAChD,MAAM,CAACC,UAAU,CAAC,GAAGV,QAAQ,CAACW,MAAM,CAAEC,GAAG,IAAIA,GAAG,CAACC,EAAE,KAAKN,MAAM,CAACE,WAAW,CAAC;IAC3E,MAAM,CAACK,eAAe,CAAC,GAAGd,QAAQ,CAACW,MAAM,CAAEC,GAAG,IAAIA,GAAG,CAACC,EAAE,KAAKL,WAAW,CAACC,WAAW,CAAC;IACrF,MAAMM,UAAU,GAAI,CAAC,GAAGL,UAAU,CAACM,IAAI,CAAC;IACxC,MAAMC,eAAe,GAAG,CAAC,GAAGH,eAAe,CAACE,IAAI,CAAC;IACjD,MAAM,CAACE,WAAW,CAAC,GAAGH,UAAU,CAACI,MAAM,CAACZ,MAAM,CAACa,KAAK,EAAE,CAAC,CAAC;IACxDH,eAAe,CAACE,MAAM,CAACX,WAAW,CAACY,KAAK,EAAE,CAAC,EAAEF,WAAW,CAAC;IACzD,IAAIG,WAAW,GAAGrB,QAAQ,CAACsB,GAAG,CAAEV,GAAG,IAAK;MACpC,IAAGA,GAAG,CAACC,EAAE,KAAKN,MAAM,CAACE,WAAW,EAAC;QAC7B,OAAO;UAAC,GAAGG,GAAG;UAAEI,IAAI,EAACD;QAAU,CAAC;MACpC,CAAC,MACI,IAAGH,GAAG,CAACC,EAAE,KAAKL,WAAW,CAACC,WAAW,EAAC;QACvC,OAAO;UAAC,GAAGG,GAAG;UAAEI,IAAI,EAAEC;QAAe,CAAC;MAC1C;MACA,OAAOL,GAAG;IACd,CAAC,CAAC;IACFP,QAAQ,CAACP,WAAW,CAACuB,WAAW,CAAC,CAAC;IAClCE,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACL,WAAW,CAAC,CAAC;EAC7D,CAAC,MAAM;IACH,MAAM,CAACX,UAAU,CAAC,GAAGV,QAAQ,CAACW,MAAM,CAAEC,GAAG,IAAIA,GAAG,CAACC,EAAE,KAAKN,MAAM,CAACE,WAAW,CAAC;IAC3E,MAAMM,UAAU,GAAI,CAAC,GAAGL,UAAU,CAACM,IAAI,CAAC;IACxC,MAAM,CAACE,WAAW,CAAC,GAAGH,UAAU,CAACI,MAAM,CAACZ,MAAM,CAACa,KAAK,EAAE,CAAC,CAAC;IACxDL,UAAU,CAACI,MAAM,CAACX,WAAW,CAACY,KAAK,EAAE,CAAC,EAAGF,WAAW,CAAC;IACrD,MAAMG,WAAW,GAAGrB,QAAQ,CAACsB,GAAG,CAAEV,GAAG,IAAG;MACpC,IAAGA,GAAG,CAACC,EAAE,KAAKN,MAAM,CAACE,WAAW,EAAC;QAC7B,OAAO;UAAC,GAAGG,GAAG;UAAEI,IAAI,EAAED;QAAU,CAAC;MACrC;MACA,OAAOH,GAAG;IACd,CAAC,CAAC;IACFP,QAAQ,CAACP,WAAW,CAACuB,WAAW,CAAC,CAAC;IAClCE,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACL,WAAW,CAAC,CAAC;EAC7D;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}