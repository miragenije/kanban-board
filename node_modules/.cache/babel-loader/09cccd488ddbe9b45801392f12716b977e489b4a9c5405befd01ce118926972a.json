{"ast":null,"code":"// actions.js\nimport { setListData } from \"../slices/taskSlices\";\nexport const handleDragEnd = (result, dispatch, listData) => {\n  const {\n    source,\n    destination\n  } = result;\n  if (!destination) {\n    return;\n  }\n  if (source.droppableId !== destination.droppableId) {\n    const [sourceCard] = listData.filter(ele => ele.id === source.droppableId);\n    const [destinationCard] = listData.filter(ele => ele.id === destination.droppableId);\n    const sourceList = [...sourceCard.task];\n    const destinationList = [...destinationCard.task];\n    const [removedList] = sourceList.splice(source.index, 1);\n    destinationList.splice(destination.index, 0, removedList);\n    let updatedList = listData.map(ele => {\n      if (ele.id === source.droppableId) {\n        return {\n          ...ele,\n          task: sourceList\n        };\n      } else if (ele.id === destination.droppableId) {\n        return {\n          ...ele,\n          task: destinationList\n        };\n      }\n      return ele;\n    });\n    dispatch(setListData(updatedList));\n    localStorage.setItem(\"List\", JSON.stringify(updatedList));\n  } else {\n    const [sourceCard] = listData.filter(ele => ele.id === source.droppableId);\n    const sourceList = [...sourceCard.task];\n    const [removedList] = sourceList.splice(source.index, 1);\n    sourceList.splice(destination.index, 0, removedList);\n    const updatedList = listData.map(ele => {\n      if (ele.id === source.droppableId) {\n        return {\n          ...ele,\n          task: sourceList\n        };\n      }\n      return ele;\n    });\n    dispatch(setListData(updatedList));\n    localStorage.setItem(\"List\", JSON.stringify(updatedList));\n  }\n};","map":{"version":3,"names":["setListData","handleDragEnd","result","dispatch","listData","source","destination","droppableId","sourceCard","filter","ele","id","destinationCard","sourceList","task","destinationList","removedList","splice","index","updatedList","map","localStorage","setItem","JSON","stringify"],"sources":["/home/korbendalas/Public/kanban-board-test/src/store/actions/index.js"],"sourcesContent":["// actions.js\nimport { setListData } from \"../slices/taskSlices\";\n\nexport const handleDragEnd = (result, dispatch, listData) => {\n    const { source, destination } = result;\n\n    if (!destination) {\n        return;\n    }\n\n    if (source.droppableId !== destination.droppableId) {\n        const [sourceCard] = listData.filter((ele) => ele.id === source.droppableId);\n        const [destinationCard] = listData.filter((ele) => ele.id === destination.droppableId);\n        const sourceList = [...sourceCard.task];\n        const destinationList = [...destinationCard.task];\n        const [removedList] = sourceList.splice(source.index, 1);\n        destinationList.splice(destination.index, 0, removedList);\n        let updatedList = listData.map((ele) => {\n            if (ele.id === source.droppableId) {\n                return { ...ele, task: sourceList };\n            } else if (ele.id === destination.droppableId) {\n                return { ...ele, task: destinationList };\n            }\n            return ele;\n        });\n        dispatch(setListData(updatedList));\n        localStorage.setItem(\"List\", JSON.stringify(updatedList));\n    } else {\n        const [sourceCard] = listData.filter((ele) => ele.id === source.droppableId);\n        const sourceList = [...sourceCard.task];\n        const [removedList] = sourceList.splice(source.index, 1);\n        sourceList.splice(destination.index, 0, removedList);\n        const updatedList = listData.map((ele) => {\n            if (ele.id === source.droppableId) {\n                return { ...ele, task: sourceList };\n            }\n            return ele;\n        });\n        dispatch(setListData(updatedList));\n        localStorage.setItem(\"List\", JSON.stringify(updatedList));\n    }\n};\n"],"mappings":"AAAA;AACA,SAASA,WAAW,QAAQ,sBAAsB;AAElD,OAAO,MAAMC,aAAa,GAAGA,CAACC,MAAM,EAAEC,QAAQ,EAAEC,QAAQ,KAAK;EACzD,MAAM;IAAEC,MAAM;IAAEC;EAAY,CAAC,GAAGJ,MAAM;EAEtC,IAAI,CAACI,WAAW,EAAE;IACd;EACJ;EAEA,IAAID,MAAM,CAACE,WAAW,KAAKD,WAAW,CAACC,WAAW,EAAE;IAChD,MAAM,CAACC,UAAU,CAAC,GAAGJ,QAAQ,CAACK,MAAM,CAAEC,GAAG,IAAKA,GAAG,CAACC,EAAE,KAAKN,MAAM,CAACE,WAAW,CAAC;IAC5E,MAAM,CAACK,eAAe,CAAC,GAAGR,QAAQ,CAACK,MAAM,CAAEC,GAAG,IAAKA,GAAG,CAACC,EAAE,KAAKL,WAAW,CAACC,WAAW,CAAC;IACtF,MAAMM,UAAU,GAAG,CAAC,GAAGL,UAAU,CAACM,IAAI,CAAC;IACvC,MAAMC,eAAe,GAAG,CAAC,GAAGH,eAAe,CAACE,IAAI,CAAC;IACjD,MAAM,CAACE,WAAW,CAAC,GAAGH,UAAU,CAACI,MAAM,CAACZ,MAAM,CAACa,KAAK,EAAE,CAAC,CAAC;IACxDH,eAAe,CAACE,MAAM,CAACX,WAAW,CAACY,KAAK,EAAE,CAAC,EAAEF,WAAW,CAAC;IACzD,IAAIG,WAAW,GAAGf,QAAQ,CAACgB,GAAG,CAAEV,GAAG,IAAK;MACpC,IAAIA,GAAG,CAACC,EAAE,KAAKN,MAAM,CAACE,WAAW,EAAE;QAC/B,OAAO;UAAE,GAAGG,GAAG;UAAEI,IAAI,EAAED;QAAW,CAAC;MACvC,CAAC,MAAM,IAAIH,GAAG,CAACC,EAAE,KAAKL,WAAW,CAACC,WAAW,EAAE;QAC3C,OAAO;UAAE,GAAGG,GAAG;UAAEI,IAAI,EAAEC;QAAgB,CAAC;MAC5C;MACA,OAAOL,GAAG;IACd,CAAC,CAAC;IACFP,QAAQ,CAACH,WAAW,CAACmB,WAAW,CAAC,CAAC;IAClCE,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACL,WAAW,CAAC,CAAC;EAC7D,CAAC,MAAM;IACH,MAAM,CAACX,UAAU,CAAC,GAAGJ,QAAQ,CAACK,MAAM,CAAEC,GAAG,IAAKA,GAAG,CAACC,EAAE,KAAKN,MAAM,CAACE,WAAW,CAAC;IAC5E,MAAMM,UAAU,GAAG,CAAC,GAAGL,UAAU,CAACM,IAAI,CAAC;IACvC,MAAM,CAACE,WAAW,CAAC,GAAGH,UAAU,CAACI,MAAM,CAACZ,MAAM,CAACa,KAAK,EAAE,CAAC,CAAC;IACxDL,UAAU,CAACI,MAAM,CAACX,WAAW,CAACY,KAAK,EAAE,CAAC,EAAEF,WAAW,CAAC;IACpD,MAAMG,WAAW,GAAGf,QAAQ,CAACgB,GAAG,CAAEV,GAAG,IAAK;MACtC,IAAIA,GAAG,CAACC,EAAE,KAAKN,MAAM,CAACE,WAAW,EAAE;QAC/B,OAAO;UAAE,GAAGG,GAAG;UAAEI,IAAI,EAAED;QAAW,CAAC;MACvC;MACA,OAAOH,GAAG;IACd,CAAC,CAAC;IACFP,QAAQ,CAACH,WAAW,CAACmB,WAAW,CAAC,CAAC;IAClCE,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACL,WAAW,CAAC,CAAC;EAC7D;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}