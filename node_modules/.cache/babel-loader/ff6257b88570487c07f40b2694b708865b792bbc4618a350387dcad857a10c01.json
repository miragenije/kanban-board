{"ast":null,"code":"var _jsxFileName = \"/home/korbendalas/Public/kanban-board-test/src/components/organism/cardinfo/cardInfo.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport TextField from \"@mui/material/TextField\";\nimport EditNoteIcon from \"@mui/icons-material/EditNote\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport { useNavigate, useParams } from \"react-router\";\nimport { setListData, setDescription, setShowDescription } from \"../../../store/slices/taskSlices\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport DashboardIcon from '@mui/icons-material/Dashboard';\nimport styled from \"styled-components\";\nimport Button from \"./../../atoms/button/button\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Person = styled.span`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 28px;\n  width: 28px;\n  border-radius: 100%;\n  font-size: 10px;\n  font-family: \"Lato\", sans-serif;\n  font-weight: 900;\n  color: #ffffff;\n  background-color: #c335fb;\n`;\nexport default function CardInfo(_ref) {\n  _s();\n  let {\n    Cid,\n    Lid\n  } = _ref;\n  const [currentCardTitle, setCurrentCardTitle] = useState(\"\");\n  const [currentTaskTitle, setCurrentTaskTitle] = useState(\"\");\n  const [currentTask, setCurrentTask] = useState({});\n  const dispatch = useDispatch();\n  const listData = useSelector(state => state.tasks.listData);\n  const description = useSelector(state => state.tasks.description);\n  const showDescription = useSelector(state => state.tasks.showDescription);\n  useEffect(() => {\n    if (!Cid) return; // Add this check to handle the case when currentTask is not defined\n\n    // Find the index of the list\n    let listIndex = listData.findIndex(ele => ele.id === Lid);\n\n    // Find the index of the task within the list\n    let taskIndex = listData[listIndex].task.findIndex(ele => ele.id === Cid);\n\n    // Extract current task information\n    let currentTask = listData[listIndex].task[taskIndex];\n\n    // Update state with current task information\n    setDescription(currentTask.description);\n    setCurrentCardTitle(listData[listIndex].listName);\n    setCurrentTaskTitle(currentTask.title);\n    setCurrentTask(currentTask);\n  }, [showDescription]);\n  function handleDescription() {\n    const updatedListData = listData.map(ele => {\n      if (ele.id === Lid) {\n        return {\n          ...ele,\n          task: ele.task.map(task => task.id === Cid ? {\n            ...task,\n            description\n          } : task)\n        };\n      }\n      return ele;\n    });\n    dispatch(setListData(updatedListData));\n    localStorage.setItem(\"List\", JSON.stringify(updatedListData));\n    dispatch(setShowDescription(false));\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(DashboardIcon, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: currentTaskTitle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"in List \", currentCardTitle]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(EditNoteIcon, {\n      fontSize: \"large\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Description\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }, this), !showDescription ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: currentTask.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => dispatch(setShowDescription(true)),\n        children: \"Edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        multiline: true,\n        sx: {\n          width: \"100%\"\n        },\n        defaultValue: currentTask.description,\n        onChange: e => {\n          dispatch(setDescription(e.target.value));\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        text: \"Save\",\n        onClick: handleDescription,\n        style: {\n          backgroundColor: \"blue\",\n          color: \"white\"\n        },\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        text: \"Cancel\",\n        onClick: () => {\n          dispatch(setShowDescription(false));\n          dispatch(setDescription(currentTask.description));\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true);\n}\n_s(CardInfo, \"xpB5qwxD8VBb26LPy+HrxTpjBV8=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector];\n});\n_c = CardInfo;\nvar _c;\n$RefreshReg$(_c, \"CardInfo\");","map":{"version":3,"names":["React","useState","useEffect","TextField","EditNoteIcon","CloseIcon","useNavigate","useParams","setListData","setDescription","setShowDescription","useDispatch","useSelector","DashboardIcon","styled","Button","jsxDEV","_jsxDEV","Fragment","_Fragment","Person","span","CardInfo","_ref","_s","Cid","Lid","currentCardTitle","setCurrentCardTitle","currentTaskTitle","setCurrentTaskTitle","currentTask","setCurrentTask","dispatch","listData","state","tasks","description","showDescription","listIndex","findIndex","ele","id","taskIndex","task","listName","title","handleDescription","updatedListData","map","localStorage","setItem","JSON","stringify","children","fileName","_jsxFileName","lineNumber","columnNumber","fontSize","onClick","multiline","sx","width","defaultValue","onChange","e","target","value","text","style","backgroundColor","color","_c","$RefreshReg$"],"sources":["/home/korbendalas/Public/kanban-board-test/src/components/organism/cardinfo/cardInfo.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport TextField from \"@mui/material/TextField\";\nimport EditNoteIcon from \"@mui/icons-material/EditNote\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport { useNavigate, useParams } from \"react-router\";\nimport { setListData, setDescription, setShowDescription } from \"../../../store/slices/taskSlices\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport DashboardIcon from '@mui/icons-material/Dashboard';\nimport styled from \"styled-components\"\nimport Button  from \"./../../atoms/button/button\"\n\nconst Person = styled.span`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 28px;\n  width: 28px;\n  border-radius: 100%;\n  font-size: 10px;\n  font-family: \"Lato\", sans-serif;\n  font-weight: 900;\n  color: #ffffff;\n  background-color: #c335fb;\n`;\n\nexport default function CardInfo({Cid, Lid}) {\n  const [currentCardTitle, setCurrentCardTitle] = useState(\"\");\n  const [currentTaskTitle, setCurrentTaskTitle] = useState(\"\");\n  const [currentTask, setCurrentTask] = useState({});\n\n\n  const dispatch = useDispatch();\n  const listData = useSelector((state) => state.tasks.listData);\n  const description = useSelector((state) => state.tasks.description);\n  const showDescription = useSelector((state) => state.tasks.showDescription);\n\n  useEffect(() => {\n    if (!Cid) return;  // Add this check to handle the case when currentTask is not defined\n\n    // Find the index of the list\n    let listIndex = listData.findIndex((ele) => ele.id === Lid);\n\n    // Find the index of the task within the list\n    let taskIndex = listData[listIndex].task.findIndex((ele) => ele.id === Cid);\n\n    // Extract current task information\n    let currentTask = listData[listIndex].task[taskIndex];\n\n    // Update state with current task information\n    setDescription(currentTask.description);\n    setCurrentCardTitle(listData[listIndex].listName);\n    setCurrentTaskTitle(currentTask.title);\n    setCurrentTask(currentTask);\n  }, [showDescription]);\n\n  function handleDescription() {\n    const updatedListData = listData.map((ele) => {\n      if (ele.id === Lid) {\n        return {\n          ...ele,\n          task: ele.task.map((task) =>\n              task.id === Cid ? { ...task, description } : task\n          ),\n        };\n      }\n      return ele;\n    });\n\n    dispatch(setListData(updatedListData));\n    localStorage.setItem(\"List\", JSON.stringify(updatedListData));\n    dispatch(setShowDescription(false));\n  }\n\n\n  return (\n      <>\n        <DashboardIcon />\n        <h3>{currentTaskTitle}</h3>\n        <p>in List {currentCardTitle}</p>\n        <EditNoteIcon fontSize=\"large\" />\n        <h4>Description</h4>\n        {!showDescription ? (\n            <div>\n              <p>{currentTask.description}</p>\n              <button onClick={() => dispatch(setShowDescription(true))}>Edit</button>\n            </div>\n        ) : (\n            <>\n              <TextField\n                  multiline\n                  sx={{ width: \"100%\" }}\n                  defaultValue={currentTask.description}\n                  onChange={(e) => {\n                    dispatch(setDescription(e.target.value));\n                  }}\n              />\n              <Button\n                  text=\"Save\"\n                  onClick={handleDescription}\n                  style={{ backgroundColor: \"blue\", color: \"white\" }}\n              >\n                Save\n              </Button>\n              <Button\n                  text=\"Cancel\"\n                  onClick={() => {\n                    dispatch(setShowDescription(false));\n                    dispatch(setDescription(currentTask.description));\n                  }}\n              />\n            </>\n        )}\n      </>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}