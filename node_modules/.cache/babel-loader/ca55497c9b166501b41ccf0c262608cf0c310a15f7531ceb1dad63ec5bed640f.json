{"ast":null,"code":"import { setListData } from \"../slices/taskSlices\";\nimport { useSelector } from \"react-redux\";\nexport const handleDragEnd = result => {\n  var _s = $RefreshSig$();\n  return _s((dispatch, getState) => {\n    _s();\n    const listData = useSelector(state => state.tasks.listData);\n    const {\n      source,\n      destination\n    } = result;\n    const state = getState();\n    if (!destination) {\n      return;\n    }\n    if (source.droppableId !== destination.droppableId) {\n      const [sourceCard] = listData.filter(ele => ele.id === source.droppableId);\n      const [destinationCard] = listData.filter(ele => ele.id === destination.droppableId);\n      const sourceList = [...sourceCard.task];\n      const destinationList = [...destinationCard.task];\n      const [removedList] = sourceList.splice(source.index, 1);\n      destinationList.splice(destination.index, 0, removedList);\n      let UpdatedList = listData.map(ele => {\n        if (ele.id === source.droppableId) {\n          return {\n            ...ele,\n            task: sourceList\n          };\n        } else if (ele.id === destination.droppableId) {\n          return {\n            ...ele,\n            task: destinationList\n          };\n        }\n        return ele;\n      });\n      dispatch(setListData(UpdatedList));\n      localStorage.setItem('List', JSON.stringify(UpdatedList));\n    } else {\n      const [sourceCard] = listData.filter(ele => ele.id === source.droppableId);\n      const sourceList = [...sourceCard.task];\n      const [removedList] = sourceList.splice(source.index, 1);\n      sourceList.splice(destination.index, 0, removedList);\n      const UpdatedList = listData.map(ele => {\n        if (ele.id === source.droppableId) {\n          return {\n            ...ele,\n            task: sourceList\n          };\n        }\n        return ele;\n      });\n      dispatch(setListData(UpdatedList));\n      localStorage.setItem('List', JSON.stringify(UpdatedList));\n    }\n  }, \"dwsy2gQ39YAoeVmWJgPs0YbIa7E=\", false, function () {\n    return [useSelector];\n  });\n};","map":{"version":3,"names":["setListData","useSelector","handleDragEnd","result","_s","$RefreshSig$","dispatch","getState","listData","state","tasks","source","destination","droppableId","sourceCard","filter","ele","id","destinationCard","sourceList","task","destinationList","removedList","splice","index","UpdatedList","map","localStorage","setItem","JSON","stringify"],"sources":["/home/korbendalas/Public/kanban-board-test/src/store/actions/index.js"],"sourcesContent":["import {setListData} from \"../slices/taskSlices\";\nimport {useSelector} from \"react-redux\";\n\n\nexport const handleDragEnd = (result) => (dispatch, getState) => {\n\n    const listData = useSelector((state)=>state.tasks.listData)\n    const { source, destination } = result;\n    const state = getState();\n\n    if (!destination) {\n        return;\n    }\n\n    if (source.droppableId !== destination.droppableId) {\n        const [sourceCard] = listData.filter((ele)=> ele.id === source.droppableId);\n        const [destinationCard] = listData.filter((ele)=> ele.id === destination.droppableId);\n        const sourceList =  [...sourceCard.task];\n        const destinationList = [...destinationCard.task];\n        const [removedList] = sourceList.splice(source.index, 1);\n        destinationList.splice(destination.index, 0, removedList);\n        let UpdatedList = listData.map((ele) => {\n            if(ele.id === source.droppableId){\n                return {...ele, task:sourceList}\n            }\n            else if(ele.id === destination.droppableId){\n                return {...ele, task: destinationList};\n            }\n            return ele;\n        })\n        dispatch(setListData(UpdatedList));\n        localStorage.setItem('List', JSON.stringify(UpdatedList))\n    } else {\n        const [sourceCard] = listData.filter((ele)=> ele.id === source.droppableId);\n        const sourceList =  [...sourceCard.task];\n        const [removedList] = sourceList.splice(source.index, 1);\n        sourceList.splice(destination.index, 0 , removedList);\n        const UpdatedList = listData.map((ele)=>{\n            if(ele.id === source.droppableId){\n                return {...ele, task: sourceList};\n            }\n            return ele;\n        })\n        dispatch(setListData(UpdatedList));\n        localStorage.setItem('List', JSON.stringify(UpdatedList))\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}