{"ast":null,"code":"var _jsxFileName = \"/home/korbendalas/Public/kanban-board-test/src/components/organism/task/Task.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport TextField from \"@mui/material/TextField\";\nimport ListEdit from '../listEdit/ListEdit';\nimport Modal from \"./../../molecules/Modal\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Draggable } from \"react-beautiful-dnd\";\nimport styled from \"styled-components\";\nimport { addCard } from \"../../../store/actions/addCard\";\nimport { setOpenCardInput } from \"../../../store/slices/taskSlices\";\nimport Button from \"../../atoms/button/Button\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskContainer = styled.div`\n  cursor: pointer;\n`;\nconst KanbanCardContainer = styled.div`\n  height: 158px;\n  margin-bottom: 20px;\n  padding: 16px;\n  background-color: #fff;\n  box-sizing: border-box;\n  box-shadow: 0px 3px 9px rgba(0, 0, 0, 0.23);\n  border-radius: 5px;\n  border-left: 10px solid transparent;\n`;\n_c = KanbanCardContainer;\nconst Content = styled.p`\n  font-family: \"Open Sans\", sans-serif;\n  font-weight: 400;\n  font-size: 14px;\n  color: darkgrey;\n  margin-bottom: 13px;\n`;\n_c2 = Content;\nconst ButtonHolder = styled.div`\n  display: flex;\n  margin-top: 15px;\n  justify-content: flex-end;\n`;\n_c3 = ButtonHolder;\nconst Task = _ref => {\n  _s();\n  let {\n    id,\n    task,\n    color\n  } = _ref;\n  const [title, setTitle] = useState(\"\");\n  const [taskModals, setTaskModals] = useState({});\n  const dispatch = useDispatch();\n  const listData = useSelector(state => state.tasks.listData);\n  const openCardInputId = useSelector(state => state.tasks.openCardInputId);\n\n  // // Initialize taskModals when listData changes\n  // useEffect(() => {\n  //   let initialModals = {};\n  //   listData.forEach((list) => {\n  //     list.task.forEach((task) => {\n  //       initialModals[task.id] = false;\n  //     });\n  //   });\n  //   setTaskModals(initialModals);\n  // }, [listData]);\n\n  // Function to handle opening/closing modal for a specific task\n  const handleToggleModal = taskId => {\n    setTaskModals(prevModals => ({\n      ...prevModals,\n      [taskId]: !prevModals[taskId]\n    }));\n  };\n  const handleSubmit = () => {\n    addCard(title, id, listData, dispatch);\n    dispatch(setOpenCardInput(null));\n    setTitle(\"\");\n  };\n  function handleChange(e) {\n    setTitle(e.target.value);\n  }\n  const handleCancel = () => {\n    dispatch(setOpenCardInput(null));\n    setTitle(\"\");\n  };\n  const handleDoubleClick = () => {\n    if (!openCardInputId) {\n      // Check if the card input is not open\n      const taskId = task[0].id; // Assuming the first task in the list has the same ID as the container\n      handleToggleModal(taskId);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: task && task.length > 0 ? task.map((item, index) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Draggable, {\n            draggableId: item.id,\n            index: index,\n            children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n              ref: provided.innerRef,\n              ...provided.draggableProps,\n              ...provided.dragHandleProps,\n              children: /*#__PURE__*/_jsxDEV(KanbanCardContainer, {\n                style: {\n                  borderColor: color\n                },\n                children: [/*#__PURE__*/_jsxDEV(ListEdit, {\n                  title: item.title,\n                  id: item.id,\n                  cardId: id,\n                  isModalOpen: taskModals[item.id],\n                  setIsModalOpen: () => handleToggleModal(item.id)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 98,\n                  columnNumber: 29\n                }, this), /*#__PURE__*/_jsxDEV(Content, {\n                  children: item.description\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 106,\n                  columnNumber: 29\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 97,\n                columnNumber: 27\n              }, this)\n            }, item.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 25\n            }, this)\n          }, item.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(Modal, {\n            isModalOpen: taskModals[item.id],\n            setIsModalOpen: () => handleToggleModal(item.id),\n            task: item,\n            id: id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 19\n          }, this)]\n        }, item.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 17\n        }, this)) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 10\n    }, this), openCardInputId && openCardInputId === id && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(TextField, {\n          id: \"outlined-multiline-static\",\n          placeholder: \"Enter card name\",\n          multiline: true,\n          value: title,\n          onChange: handleChange,\n          rows: 2,\n          sx: {\n            width: \"100%\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(ButtonHolder, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          text: \"Add ticket\",\n          onClick: handleSubmit,\n          type: \"add\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          text: \"Cancel\",\n          onClick: handleCancel,\n          type: \"cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n_s(Task, \"84jFyAHHcFdO7eGeK25mxAZi67o=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n_c4 = Task;\nexport default Task;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"KanbanCardContainer\");\n$RefreshReg$(_c2, \"Content\");\n$RefreshReg$(_c3, \"ButtonHolder\");\n$RefreshReg$(_c4, \"Task\");","map":{"version":3,"names":["React","useState","useEffect","TextField","ListEdit","Modal","useDispatch","useSelector","Draggable","styled","addCard","setOpenCardInput","Button","jsxDEV","_jsxDEV","TaskContainer","div","KanbanCardContainer","_c","Content","p","_c2","ButtonHolder","_c3","Task","_ref","_s","id","task","color","title","setTitle","taskModals","setTaskModals","dispatch","listData","state","tasks","openCardInputId","handleToggleModal","taskId","prevModals","handleSubmit","handleChange","e","target","value","handleCancel","handleDoubleClick","children","length","map","item","index","Fragment","draggableId","provided","ref","innerRef","draggableProps","dragHandleProps","style","borderColor","cardId","isModalOpen","setIsModalOpen","fileName","_jsxFileName","lineNumber","columnNumber","description","placeholder","multiline","onChange","rows","sx","width","text","onClick","type","_c4","$RefreshReg$"],"sources":["/home/korbendalas/Public/kanban-board-test/src/components/organism/task/Task.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport TextField from \"@mui/material/TextField\";\nimport ListEdit from '../listEdit/ListEdit'\nimport Modal from \"./../../molecules/Modal\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Draggable } from \"react-beautiful-dnd\";\nimport styled from \"styled-components\";\nimport { addCard } from \"../../../store/actions/addCard\";\nimport { setOpenCardInput } from \"../../../store/slices/taskSlices\";\nimport Button from \"../../atoms/button/Button\";\n\nconst TaskContainer = styled.div`\n  cursor: pointer;\n`;\nconst KanbanCardContainer = styled.div`\n  height: 158px;\n  margin-bottom: 20px;\n  padding: 16px;\n  background-color: #fff;\n  box-sizing: border-box;\n  box-shadow: 0px 3px 9px rgba(0, 0, 0, 0.23);\n  border-radius: 5px;\n  border-left: 10px solid transparent;\n`;\n\nconst Content = styled.p`\n  font-family: \"Open Sans\", sans-serif;\n  font-weight: 400;\n  font-size: 14px;\n  color: darkgrey;\n  margin-bottom: 13px;\n`;\nconst ButtonHolder = styled.div`\n  display: flex;\n  margin-top: 15px;\n  justify-content: flex-end;\n`;\n\n\nconst Task = ({id, task, color}) => {\n  const [title, setTitle] = useState(\"\");\n  const [taskModals, setTaskModals] = useState({});\n  const dispatch = useDispatch();\n  const listData = useSelector((state) => state.tasks.listData);\n  const openCardInputId = useSelector((state) => state.tasks.openCardInputId);\n\n  // // Initialize taskModals when listData changes\n  // useEffect(() => {\n  //   let initialModals = {};\n  //   listData.forEach((list) => {\n  //     list.task.forEach((task) => {\n  //       initialModals[task.id] = false;\n  //     });\n  //   });\n  //   setTaskModals(initialModals);\n  // }, [listData]);\n\n  // Function to handle opening/closing modal for a specific task\n  const handleToggleModal = (taskId) => {\n    setTaskModals((prevModals) => ({ ...prevModals, [taskId]: !prevModals[taskId] }));\n  };\n\n  const handleSubmit = () => {\n    addCard(title, id, listData, dispatch);\n    dispatch(setOpenCardInput(null));\n    setTitle(\"\");\n  }\n\n  function handleChange(e) {\n    setTitle(e.target.value);\n  }\n  const handleCancel = () => {\n    dispatch(setOpenCardInput(null));\n    setTitle(\"\");\n  }\n  const handleDoubleClick = () => {\n    if (!openCardInputId) {\n      // Check if the card input is not open\n      const taskId = task[0].id; // Assuming the first task in the list has the same ID as the container\n      handleToggleModal(taskId);\n    }\n  };\n  return (\n    <div><div>\n      <div>\n        {task && task.length > 0\n            ? task.map((item, index) => (\n                <React.Fragment key={item.id}>\n                  <Draggable key={item.id} draggableId={item.id} index={index}>\n                    {(provided) => (\n                        <div\n                            key={item.id}\n                            ref={provided.innerRef}\n                            {...provided.draggableProps}\n                            {...provided.dragHandleProps}\n                        >\n                          <KanbanCardContainer style={{ borderColor: color }}>\n                            <ListEdit\n                                title={item.title}\n                                id={item.id}\n                                cardId={id}\n                                isModalOpen={taskModals[item.id]}\n                                setIsModalOpen={() => handleToggleModal(item.id)}\n                            />\n\n                            <Content>{item.description}</Content>\n                          </KanbanCardContainer>\n                        </div>\n                    )}\n                  </Draggable>\n                  <Modal\n                      isModalOpen={taskModals[item.id]}\n                      setIsModalOpen={() => handleToggleModal(item.id)}\n                      task={item}\n                      id={id}\n                  />\n                </React.Fragment>\n            ))\n            : null}\n      </div>\n    </div>\n      {(openCardInputId && openCardInputId === id) && (\n          <div>\n            <div>\n              <TextField\n                  id=\"outlined-multiline-static\"\n                  placeholder=\"Enter card name\"\n                  multiline\n                  value={title}\n                  onChange={handleChange}\n                  rows={2}\n                  sx={{ width: \"100%\" }}\n              />\n            </div>\n            <ButtonHolder>\n              <Button text=\"Add ticket\" onClick={handleSubmit} type=\"add\" />\n              <Button text=\"Cancel\" onClick={handleCancel} type=\"cancel\" />\n            </ButtonHolder>\n          </div>\n      )}\n    </div>\n  );\n};\n\nexport default Task;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}