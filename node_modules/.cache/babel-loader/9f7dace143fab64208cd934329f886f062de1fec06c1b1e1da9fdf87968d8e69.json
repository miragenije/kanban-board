{"ast":null,"code":"var _jsxFileName = \"/home/korbendalas/Public/kanban-board-test/src/components/organism/cardinfo/cardInfo.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport './cardInfo.css';\nimport TextField from \"@mui/material/TextField\";\nimport EditNoteIcon from \"@mui/icons-material/EditNote\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport { useNavigate, useParams } from \"react-router\";\nimport { setListData, setDescription, setShowDescription } from \"../../../store/slices/taskSlices\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport DashboardIcon from '@mui/icons-material/Dashboard';\nimport styled from \"styled-components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Person = styled.span`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 28px;\n  width: 28px;\n  border-radius: 100%;\n  font-size: 10px;\n  font-family: \"Lato\", sans-serif;\n  font-weight: 900;\n  color: #ffffff;\n  background-color: #c335fb;\n`;\nexport default function CardInfo() {\n  _s();\n  const [currentCardTitle, setCurrentCardTitle] = useState(\"\");\n  const [currentTaskTitle, setCurrentTaskTitle] = useState(\"\");\n  const [currentTask, setCurrentTask] = useState({});\n  const navigate = useNavigate();\n  const {\n    Cid,\n    Lid\n  } = useParams();\n  const dispatch = useDispatch();\n  const listData = useSelector(state => state.tasks.listData);\n  const description = useSelector(state => state.tasks.description);\n  const showDescription = useSelector(state => state.tasks.showDescription);\n  useEffect(() => {\n    let input = [...listData];\n    let index = input.findIndex(ele => ele.id === Cid);\n    let currentCard = {\n      ...input[index]\n    };\n    let taskss = {\n      ...currentCard\n    };\n    let Task = [...taskss.task];\n    let taskindex = Task.findIndex(ele => ele.id === Lid);\n    let currentTask = Task[taskindex];\n    if (currentTask) {\n      setDescription(currentTask.description);\n      setCurrentCardTitle(currentCard.listName);\n      setCurrentTaskTitle(currentTask.title);\n      setCurrentTask(currentTask);\n    }\n  }, [showDescription]);\n  function handleDescription() {\n    let input = [...listData];\n    let index = input.findIndex(ele => ele.id === Cid);\n    let currentCard = {\n      ...input[index]\n    };\n    let taskss = {\n      ...currentCard\n    };\n    let Task = [...taskss.task];\n    let taskindex = Task.findIndex(ele => ele.id === Lid);\n    let particularTask = {\n      ...currentTask\n    };\n    particularTask.description = description;\n    Task.splice(taskindex, 1, particularTask);\n    taskss.task = Task;\n    input.splice(index, 1, taskss);\n    dispatch(setListData(input));\n    localStorage.setItem(\"List\", JSON.stringify(input));\n    dispatch(setShowDescription(false));\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Ibox_mainBackground\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Ibox_container\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 7\n  }, this);\n}\n_s(CardInfo, \"2kxhzXIH7SsH1CZMA8wMljUWhfk=\", false, function () {\n  return [useNavigate, useParams, useDispatch, useSelector, useSelector, useSelector];\n});\n_c = CardInfo;\nvar _c;\n$RefreshReg$(_c, \"CardInfo\");","map":{"version":3,"names":["React","useState","useEffect","TextField","EditNoteIcon","CloseIcon","useNavigate","useParams","setListData","setDescription","setShowDescription","useDispatch","useSelector","DashboardIcon","styled","jsxDEV","_jsxDEV","Person","span","CardInfo","_s","currentCardTitle","setCurrentCardTitle","currentTaskTitle","setCurrentTaskTitle","currentTask","setCurrentTask","navigate","Cid","Lid","dispatch","listData","state","tasks","description","showDescription","input","index","findIndex","ele","id","currentCard","taskss","Task","task","taskindex","listName","title","handleDescription","particularTask","splice","localStorage","setItem","JSON","stringify","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/korbendalas/Public/kanban-board-test/src/components/organism/cardinfo/cardInfo.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport './cardInfo.css'\nimport TextField from \"@mui/material/TextField\";\nimport EditNoteIcon from \"@mui/icons-material/EditNote\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport { useNavigate, useParams } from \"react-router\";\nimport { setListData, setDescription, setShowDescription } from \"../../../store/slices/taskSlices\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport DashboardIcon from '@mui/icons-material/Dashboard';\nimport styled from \"styled-components\"\n\nconst Person = styled.span`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 28px;\n  width: 28px;\n  border-radius: 100%;\n  font-size: 10px;\n  font-family: \"Lato\", sans-serif;\n  font-weight: 900;\n  color: #ffffff;\n  background-color: #c335fb;\n`;\n\nexport default function CardInfo() {\n  const [currentCardTitle, setCurrentCardTitle] = useState(\"\");\n  const [currentTaskTitle, setCurrentTaskTitle] = useState(\"\");\n  const [currentTask, setCurrentTask] = useState({});\n\n  const navigate = useNavigate();\n  const { Cid, Lid } = useParams();\n\n  const dispatch = useDispatch();\n  const listData = useSelector((state) => state.tasks.listData);\n  const description = useSelector((state) => state.tasks.description);\n  const showDescription = useSelector((state) => state.tasks.showDescription);\n\n  useEffect(() => {\n    let input = [...listData];\n    let index = input.findIndex((ele) => ele.id === Cid);\n\n    let currentCard = { ...input[index] };\n    let taskss = { ...currentCard };\n    let Task = [...taskss.task];\n\n    let taskindex = Task.findIndex((ele) => ele.id === Lid);\n\n    let currentTask = Task[taskindex];\n\n    if (currentTask) {\n      setDescription(currentTask.description);\n      setCurrentCardTitle(currentCard.listName);\n      setCurrentTaskTitle(currentTask.title);\n      setCurrentTask(currentTask);\n    }\n  }, [showDescription]);\n\n  function handleDescription() {\n    let input = [...listData];\n    let index = input.findIndex((ele) => ele.id === Cid);\n    let currentCard = { ...input[index] };\n    let taskss = { ...currentCard };\n    let Task = [...taskss.task];\n    let taskindex = Task.findIndex((ele) => ele.id === Lid);\n    let particularTask = { ...currentTask };\n    particularTask.description = description;\n    Task.splice(taskindex, 1, particularTask);\n    taskss.task = Task;\n    input.splice(index, 1, taskss);\n    dispatch(setListData(input));\n    localStorage.setItem(\"List\", JSON.stringify(input));\n    dispatch(setShowDescription(false));\n  }\n\n  return (\n      <div className=\"Ibox_mainBackground\">\n        <div className=\"Ibox_container\">\n     \n        </div>\n      </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}