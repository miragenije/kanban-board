{"ast":null,"code":"var _jsxFileName = \"/home/korbendalas/Public/kanban-board-test/src/components/organism/taskController/TaskController.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport Task from \"../task/Task\";\nimport { setListData, setOpenCardInput } from \"../../../store/slices/taskSlices\";\nimport styled from \"styled-components\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Droppable } from \"react-beautiful-dnd\";\nimport AddCardIcon from \"@mui/icons-material/AddCard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskContainer = styled.div`\n  min-width: 350px;\n  padding: 25px 25px 25px 15px;\n`;\n_c = TaskContainer;\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n`;\n_c2 = Wrapper;\nconst Title = styled.h2`\n  display: flex;\n  font-size: 18px;\n  border-radius: 3px;\n  padding: 16px;\n  font-weight: bold;\n  margin-bottom: 30px;\n  color: #575064;\n  box-shadow: 0px 3px 9px rgba(0, 0, 0, 0.1);\n  border-top: 2px solid transparent;\n  text-transform: uppercase;\n  background: #fff;\n  justify-content: space-between;\n`;\n_c3 = Title;\nconst NumOfTask = styled.span`\n  color: lightgray;\n  display: inline-block;\n  margin-left: 10px;\n`;\n_c4 = NumOfTask;\nconst TaskController = () => {\n  _s();\n  const dispatch = useDispatch();\n  const listData = useSelector(state => state.tasks.listData);\n  const openCardInputId = useSelector(state => state.tasks.openCardInputId);\n  const searchQuery = useSelector(state => state.tasks.searchQuery);\n  useEffect(() => {\n    console.log(\"Updated openCardInputId:\", openCardInputId);\n  }, [openCardInputId]);\n  const getColor = id => {\n    if (id === \"todo\") {\n      return '#dd9692';\n    } else if (id === \"inProgress\") {\n      return '#25b2fe';\n    } else if (id === \"done\") {\n      return '#8ac449';\n    }\n    return 'black';\n  };\n  const handleAddButton = listId => {\n    dispatch(setOpenCardInput(listId));\n    console.log(openCardInputId, listId);\n  };\n  useEffect(() => {\n    const localStorageData = localStorage.getItem(\"List\");\n    if (localStorageData) {\n      dispatch(setListData(JSON.parse(localStorageData)));\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    children: listData.map((ele, index) => /*#__PURE__*/_jsxDEV(Droppable, {\n      index: index,\n      droppableId: ele.id,\n      children: provided => /*#__PURE__*/_jsxDEV(TaskContainer, {\n        ref: provided.innerRef,\n        ...provided.droppableProps,\n        children: [/*#__PURE__*/_jsxDEV(Title, {\n          style: {\n            borderColor: getColor(ele.id)\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [ele.listName, /*#__PURE__*/_jsxDEV(NumOfTask, {\n              children: [\"(\", ele.task.length, \")\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(AddCardIcon, {\n            onClick: () => handleAddButton(ele.id),\n            style: {\n              color: getColor(ele.id),\n              cursor: \"pointer\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Task, {\n          id: ele.id,\n          color: getColor(ele.id),\n          openCardInput: ele.id === openCardInputId,\n          Lname: ele.listName,\n          task: ele.task\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 15\n        }, this)]\n      }, ele.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }, this)\n    }, ele.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskController, \"wGR0T4oLQ32Gp29qg6Xgm8NB/Qg=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector];\n});\n_c5 = TaskController;\nexport default TaskController;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"TaskContainer\");\n$RefreshReg$(_c2, \"Wrapper\");\n$RefreshReg$(_c3, \"Title\");\n$RefreshReg$(_c4, \"NumOfTask\");\n$RefreshReg$(_c5, \"TaskController\");","map":{"version":3,"names":["React","useEffect","useState","Task","setListData","setOpenCardInput","styled","useSelector","useDispatch","Droppable","AddCardIcon","jsxDEV","_jsxDEV","TaskContainer","div","_c","Wrapper","_c2","Title","h2","_c3","NumOfTask","span","_c4","TaskController","_s","dispatch","listData","state","tasks","openCardInputId","searchQuery","console","log","getColor","id","handleAddButton","listId","localStorageData","localStorage","getItem","JSON","parse","children","map","ele","index","droppableId","provided","ref","innerRef","droppableProps","style","borderColor","listName","task","length","fileName","_jsxFileName","lineNumber","columnNumber","onClick","color","cursor","openCardInput","Lname","_c5","$RefreshReg$"],"sources":["/home/korbendalas/Public/kanban-board-test/src/components/organism/taskController/TaskController.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Task from \"../task/Task\";\nimport { setListData, setOpenCardInput } from \"../../../store/slices/taskSlices\";\nimport styled from \"styled-components\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Droppable } from \"react-beautiful-dnd\";\nimport AddCardIcon from \"@mui/icons-material/AddCard\";\n\nconst TaskContainer = styled.div`\n  min-width: 350px;\n  padding: 25px 25px 25px 15px;\n`;\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n`;\nconst Title = styled.h2`\n  display: flex;\n  font-size: 18px;\n  border-radius: 3px;\n  padding: 16px;\n  font-weight: bold;\n  margin-bottom: 30px;\n  color: #575064;\n  box-shadow: 0px 3px 9px rgba(0, 0, 0, 0.1);\n  border-top: 2px solid transparent;\n  text-transform: uppercase;\n  background: #fff;\n  justify-content: space-between;\n`;\nconst NumOfTask = styled.span`\n  color: lightgray;\n  display: inline-block;\n  margin-left: 10px;\n`;\nconst TaskController = () => {\n  const dispatch = useDispatch();\n  const listData = useSelector((state) => state.tasks.listData);\n  const openCardInputId = useSelector((state) => state.tasks.openCardInputId);\n  const searchQuery = useSelector((state) => state.tasks.searchQuery);\n\n  useEffect(() => {\n    console.log(\"Updated openCardInputId:\", openCardInputId);\n  }, [openCardInputId]);\n\n  const getColor = (id) => {\n    if (id === \"todo\") {\n      return '#dd9692';\n    } else if (id === \"inProgress\") {\n      return '#25b2fe';\n    } else if (id === \"done\") {\n      return '#8ac449';\n    }\n\n    return 'black';\n  };\n\n  const handleAddButton = (listId) => {\n    dispatch(setOpenCardInput(listId));\n    console.log(openCardInputId, listId)\n  }\n\n  useEffect(() => {\n    const localStorageData = localStorage.getItem(\"List\");\n    if (localStorageData) {\n      dispatch(setListData(JSON.parse(localStorageData)));\n    }\n  }, []);\n\n  return (\n    <Wrapper>\n      {listData.map((ele, index) => (\n        <Droppable key={ele.id} index={index} droppableId={ele.id}>\n          {(provided) => (\n            <TaskContainer\n              key={ele.id}\n              ref={provided.innerRef}\n              {...provided.droppableProps}\n            >\n              <Title style={{borderColor: getColor(ele.id)}}>\n                <div>\n                  {ele.listName}\n                  <NumOfTask>({ele.task.length})</NumOfTask>\n                </div>\n                <AddCardIcon onClick={() => handleAddButton(ele.id)} style={{ color: getColor(ele.id), cursor: \"pointer\"}}/>\n              </Title>\n              <Task\n                  id={ele.id}\n                  color={getColor(ele.id)}\n                  openCardInput={ele.id === openCardInputId}\n                  Lname={ele.listName}\n                  task={ele.task}\n              />\n            </TaskContainer>\n          )}\n        </Droppable>\n      ))}\n    </Wrapper>\n  );\n};\n\nexport default TaskController;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}