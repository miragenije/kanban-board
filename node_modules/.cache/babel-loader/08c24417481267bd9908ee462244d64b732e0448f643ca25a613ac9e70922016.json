{"ast":null,"code":"var _jsxFileName = \"/home/korbendalas/Public/kanban-board-test/src/components/organism/cardinfo/cardInfo.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport TextField from \"@mui/material/TextField\";\nimport EditNoteIcon from \"@mui/icons-material/EditNote\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport { useNavigate, useParams } from \"react-router\";\nimport { setListData, setDescription, setShowDescription } from \"../../../store/slices/taskSlices\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport DashboardIcon from '@mui/icons-material/Dashboard';\nimport Button from \"./../../atoms/button/button\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function CardInfo() {\n  _s();\n  const [currentCardTitle, setCurrentCardTitle] = useState(\"\");\n  const [currentTaskTitle, setCurrentTaskTitle] = useState(\"\");\n  const [currentTask, setCurrentTask] = useState({});\n  const navigate = useNavigate();\n  const {\n    Cid,\n    Lid\n  } = useParams();\n  const dispatch = useDispatch();\n  const listData = useSelector(state => state.tasks.listData);\n  const description = useSelector(state => state.tasks.description);\n  const showDescription = useSelector(state => state.tasks.showDescription);\n  useEffect(() => {\n    let input = [...listData];\n    let index = input.findIndex(ele => ele.id === Cid);\n    let currentCard = {\n      ...input[index]\n    };\n    let taskss = {\n      ...currentCard\n    };\n    let Task = [...taskss.task];\n    let taskindex = Task.findIndex(ele => ele.id === Lid);\n    let currentTask = Task[taskindex];\n    if (currentTask) {\n      setDescription(currentTask.description);\n      setCurrentCardTitle(currentCard.listName);\n      setCurrentTaskTitle(currentTask.title);\n      setCurrentTask(currentTask);\n    }\n  }, [showDescription]);\n  function handleDescription() {\n    const updatedListData = listData.map(ele => {\n      if (ele.id === Cid) {\n        return {\n          ...ele,\n          task: ele.task.map(task => task.id === Lid ? {\n            ...task,\n            description\n          } : task)\n        };\n      }\n      return ele;\n    });\n    dispatch(setListData(updatedListData));\n    localStorage.setItem(\"List\", JSON.stringify(updatedListData));\n    dispatch(setShowDescription(false));\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(DashboardIcon, {\n      onClick: () => navigate(\"/\")\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: currentTaskTitle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"in List \", currentCardTitle]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(EditNoteIcon, {\n      fontSize: \"large\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Description\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this), !showDescription ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: currentTask.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => dispatch(setShowDescription(true)),\n        children: \"Edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        multiline: true,\n        sx: {\n          width: \"100%\"\n        },\n        defaultValue: currentTask.description,\n        onChange: e => {\n          dispatch(setDescription(e.target.value));\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        text: \"Save\",\n        onClick: handleDescription,\n        style: {\n          backgroundColor: \"blue\",\n          color: \"white\"\n        },\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        text: \"Cancel\",\n        onClick: () => {\n          dispatch(setShowDescription(false));\n          dispatch(setDescription(currentTask.description));\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true);\n}\n_s(CardInfo, \"2kxhzXIH7SsH1CZMA8wMljUWhfk=\", false, function () {\n  return [useNavigate, useParams, useDispatch, useSelector, useSelector, useSelector];\n});\n_c = CardInfo;\nvar _c;\n$RefreshReg$(_c, \"CardInfo\");","map":{"version":3,"names":["React","useState","useEffect","TextField","EditNoteIcon","CloseIcon","useNavigate","useParams","setListData","setDescription","setShowDescription","useDispatch","useSelector","DashboardIcon","Button","jsxDEV","_jsxDEV","Fragment","_Fragment","CardInfo","_s","currentCardTitle","setCurrentCardTitle","currentTaskTitle","setCurrentTaskTitle","currentTask","setCurrentTask","navigate","Cid","Lid","dispatch","listData","state","tasks","description","showDescription","input","index","findIndex","ele","id","currentCard","taskss","Task","task","taskindex","listName","title","handleDescription","updatedListData","map","localStorage","setItem","JSON","stringify","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","fontSize","multiline","sx","width","defaultValue","onChange","e","target","value","text","style","backgroundColor","color","_c","$RefreshReg$"],"sources":["/home/korbendalas/Public/kanban-board-test/src/components/organism/cardinfo/cardInfo.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport TextField from \"@mui/material/TextField\";\nimport EditNoteIcon from \"@mui/icons-material/EditNote\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport { useNavigate, useParams } from \"react-router\";\nimport { setListData, setDescription, setShowDescription } from \"../../../store/slices/taskSlices\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport DashboardIcon from '@mui/icons-material/Dashboard';\nimport Button from \"./../../atoms/button/button\";\n\nexport default function CardInfo() {\n  const [currentCardTitle, setCurrentCardTitle] = useState(\"\");\n  const [currentTaskTitle, setCurrentTaskTitle] = useState(\"\");\n  const [currentTask, setCurrentTask] = useState({});\n\n  const navigate = useNavigate();\n  const { Cid, Lid } = useParams();\n\n  const dispatch = useDispatch();\n  const listData = useSelector((state) => state.tasks.listData);\n  const description = useSelector((state) => state.tasks.description);\n  const showDescription = useSelector((state) => state.tasks.showDescription);\n\n  useEffect(() => {\n    let input = [...listData];\n    let index = input.findIndex((ele) => ele.id === Cid);\n\n    let currentCard = { ...input[index] };\n    let taskss = { ...currentCard };\n    let Task = [...taskss.task];\n\n    let taskindex = Task.findIndex((ele) => ele.id === Lid);\n\n    let currentTask = Task[taskindex];\n\n    if (currentTask) {\n      setDescription(currentTask.description);\n      setCurrentCardTitle(currentCard.listName);\n      setCurrentTaskTitle(currentTask.title);\n      setCurrentTask(currentTask);\n    }\n  }, [showDescription]);\n\n  function handleDescription() {\n    const updatedListData = listData.map((ele) => {\n      if (ele.id === Cid) {\n        return {\n          ...ele,\n          task: ele.task.map((task) =>\n              task.id === Lid ? { ...task, description } : task\n          ),\n        };\n      }\n      return ele;\n    });\n\n    dispatch(setListData(updatedListData));\n    localStorage.setItem(\"List\", JSON.stringify(updatedListData));\n    dispatch(setShowDescription(false));\n  }\n\n  return (\n      <>\n        <DashboardIcon onClick={() => navigate(\"/\")} />\n        <h3>{currentTaskTitle}</h3>\n        <p>in List {currentCardTitle}</p>\n        <EditNoteIcon fontSize=\"large\" />\n        <h4>Description</h4>\n        {!showDescription ? (\n            <div>\n              <p>{currentTask.description}</p>\n              <button onClick={() => dispatch(setShowDescription(true))}>Edit</button>\n            </div>\n        ) : (\n            <>\n              <TextField\n                  multiline\n                  sx={{ width: \"100%\" }}\n                  defaultValue={currentTask.description}\n                  onChange={(e) => {\n                    dispatch(setDescription(e.target.value));\n                  }}\n              />\n              <Button\n                  text=\"Save\"\n                  onClick={handleDescription}\n                  style={{ backgroundColor: \"blue\", color: \"white\" }}\n              >\n                Save\n              </Button>\n              <Button\n                  text=\"Cancel\"\n                  onClick={() => {\n                    dispatch(setShowDescription(false));\n                    dispatch(setDescription(currentTask.description));\n                  }}\n              />\n            </>\n        )}\n      </>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}