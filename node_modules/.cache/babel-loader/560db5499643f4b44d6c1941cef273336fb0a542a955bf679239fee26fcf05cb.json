{"ast":null,"code":"import { SET_LIST_DATA, SET_DESCRIPTION, SET_SHOW_DESCRIPTION } from '../constants/index';\nexport const setListData = data => ({\n  type: SET_LIST_DATA,\n  payload: data\n});\nexport const setDescription = description => ({\n  type: SET_DESCRIPTION,\n  payload: description\n});\nexport const setShowDescription = show => ({\n  type: SET_SHOW_DESCRIPTION,\n  payload: show\n});\nexport const handleDragEnd = result => {\n  return (dispatch, getState) => {\n    const {\n      source,\n      destination\n    } = result;\n    const {\n      listData\n    } = getState().tasks;\n    if (!destination) {\n      return;\n    }\n    if (source.droppableId !== destination.droppableId) {\n      moveBetweenColumns(source, destination, dispatch, listData);\n    } else {\n      moveWithinColumn(source, destination, dispatch, listData);\n    }\n  };\n};\nconst moveBetweenColumns = (source, destination, dispatch, listData) => {\n  const sourceList = getListById(listData, source.droppableId).task.slice();\n  const destinationList = getListById(listData, destination.droppableId).task.slice();\n  const [removedList] = sourceList.splice(source.index, 1);\n  destinationList.splice(destination.index, 0, removedList);\n  const updatedList = updateListData(listData, source.droppableId, sourceList, destination.droppableId, destinationList);\n  dispatch(setListData(updatedList));\n  localStorage.setItem(\"List\", JSON.stringify(updatedList));\n};\nconst moveWithinColumn = (source, destination, dispatch, listData) => {\n  const sourceList = getListById(listData, source.droppableId).task.slice();\n  const [removedList] = sourceList.splice(source.index, 1);\n  sourceList.splice(destination.index, 0, removedList);\n  const updatedList = updateListData(listData, source.droppableId, sourceList);\n  dispatch(setListData(updatedList));\n  localStorage.setItem(\"List\", JSON.stringify(updatedList));\n};\nconst getListById = (listData, id) => {\n  return listData.find(list => list.id === id);\n};\nconst updateListData = (listData, sourceId, sourceList, destinationId, destinationList) => {\n  const updatedList = listData.map(list => {\n    if (list.id === sourceId) {\n      return {\n        ...list,\n        task: sourceList\n      };\n    }\n    if (list.id === destinationId) {\n      return {\n        ...list,\n        task: destinationList\n      };\n    }\n    return list;\n  });\n  return updatedList;\n};","map":{"version":3,"names":["SET_LIST_DATA","SET_DESCRIPTION","SET_SHOW_DESCRIPTION","setListData","data","type","payload","setDescription","description","setShowDescription","show","handleDragEnd","result","dispatch","getState","source","destination","listData","tasks","droppableId","moveBetweenColumns","moveWithinColumn","sourceList","getListById","task","slice","destinationList","removedList","splice","index","updatedList","updateListData","localStorage","setItem","JSON","stringify","id","find","list","sourceId","destinationId","map"],"sources":["/home/korbendalas/Public/kanban-board-test/src/store/actions/index.js"],"sourcesContent":["import { SET_LIST_DATA, SET_DESCRIPTION, SET_SHOW_DESCRIPTION } from '../constants/index';\n\nexport const setListData = (data) => ({\n    type: SET_LIST_DATA,\n    payload: data,\n});\n\nexport const setDescription = (description) => ({\n    type: SET_DESCRIPTION,\n    payload: description,\n});\n\nexport const setShowDescription = (show) => ({\n    type: SET_SHOW_DESCRIPTION,\n    payload: show,\n});\n\nexport const handleDragEnd = (result) => {\n    return (dispatch, getState) => {\n        const { source, destination } = result;\n        const { listData } = getState().tasks;\n\n        if (!destination) {\n            return;\n        }\n\n        if (source.droppableId !== destination.droppableId) {\n            moveBetweenColumns(source, destination, dispatch, listData);\n        } else {\n            moveWithinColumn(source, destination, dispatch, listData);\n        }\n    };\n};\n\nconst moveBetweenColumns = (source, destination, dispatch, listData) => {\n    const sourceList = getListById(listData, source.droppableId).task.slice();\n    const destinationList = getListById(listData, destination.droppableId).task.slice();\n\n    const [removedList] = sourceList.splice(source.index, 1);\n    destinationList.splice(destination.index, 0, removedList);\n\n    const updatedList = updateListData(listData, source.droppableId, sourceList, destination.droppableId, destinationList);\n\n    dispatch(setListData(updatedList));\n    localStorage.setItem(\"List\", JSON.stringify(updatedList));\n};\n\nconst moveWithinColumn = (source, destination, dispatch, listData) => {\n    const sourceList = getListById(listData, source.droppableId).task.slice();\n\n    const [removedList] = sourceList.splice(source.index, 1);\n    sourceList.splice(destination.index, 0, removedList);\n\n    const updatedList = updateListData(listData, source.droppableId, sourceList);\n\n    dispatch(setListData(updatedList));\n    localStorage.setItem(\"List\", JSON.stringify(updatedList));\n};\n\nconst getListById = (listData, id) => {\n    return listData.find((list) => list.id === id);\n};\n\nconst updateListData = (listData, sourceId, sourceList, destinationId, destinationList) => {\n    const updatedList = listData.map((list) => {\n        if (list.id === sourceId) {\n            return { ...list, task: sourceList };\n        }\n        if (list.id === destinationId) {\n            return { ...list, task: destinationList };\n        }\n        return list;\n    });\n\n    return updatedList;\n};\n"],"mappings":"AAAA,SAASA,aAAa,EAAEC,eAAe,EAAEC,oBAAoB,QAAQ,oBAAoB;AAEzF,OAAO,MAAMC,WAAW,GAAIC,IAAI,KAAM;EAClCC,IAAI,EAAEL,aAAa;EACnBM,OAAO,EAAEF;AACb,CAAC,CAAC;AAEF,OAAO,MAAMG,cAAc,GAAIC,WAAW,KAAM;EAC5CH,IAAI,EAAEJ,eAAe;EACrBK,OAAO,EAAEE;AACb,CAAC,CAAC;AAEF,OAAO,MAAMC,kBAAkB,GAAIC,IAAI,KAAM;EACzCL,IAAI,EAAEH,oBAAoB;EAC1BI,OAAO,EAAEI;AACb,CAAC,CAAC;AAEF,OAAO,MAAMC,aAAa,GAAIC,MAAM,IAAK;EACrC,OAAO,CAACC,QAAQ,EAAEC,QAAQ,KAAK;IAC3B,MAAM;MAAEC,MAAM;MAAEC;IAAY,CAAC,GAAGJ,MAAM;IACtC,MAAM;MAAEK;IAAS,CAAC,GAAGH,QAAQ,CAAC,CAAC,CAACI,KAAK;IAErC,IAAI,CAACF,WAAW,EAAE;MACd;IACJ;IAEA,IAAID,MAAM,CAACI,WAAW,KAAKH,WAAW,CAACG,WAAW,EAAE;MAChDC,kBAAkB,CAACL,MAAM,EAAEC,WAAW,EAAEH,QAAQ,EAAEI,QAAQ,CAAC;IAC/D,CAAC,MAAM;MACHI,gBAAgB,CAACN,MAAM,EAAEC,WAAW,EAAEH,QAAQ,EAAEI,QAAQ,CAAC;IAC7D;EACJ,CAAC;AACL,CAAC;AAED,MAAMG,kBAAkB,GAAGA,CAACL,MAAM,EAAEC,WAAW,EAAEH,QAAQ,EAAEI,QAAQ,KAAK;EACpE,MAAMK,UAAU,GAAGC,WAAW,CAACN,QAAQ,EAAEF,MAAM,CAACI,WAAW,CAAC,CAACK,IAAI,CAACC,KAAK,CAAC,CAAC;EACzE,MAAMC,eAAe,GAAGH,WAAW,CAACN,QAAQ,EAAED,WAAW,CAACG,WAAW,CAAC,CAACK,IAAI,CAACC,KAAK,CAAC,CAAC;EAEnF,MAAM,CAACE,WAAW,CAAC,GAAGL,UAAU,CAACM,MAAM,CAACb,MAAM,CAACc,KAAK,EAAE,CAAC,CAAC;EACxDH,eAAe,CAACE,MAAM,CAACZ,WAAW,CAACa,KAAK,EAAE,CAAC,EAAEF,WAAW,CAAC;EAEzD,MAAMG,WAAW,GAAGC,cAAc,CAACd,QAAQ,EAAEF,MAAM,CAACI,WAAW,EAAEG,UAAU,EAAEN,WAAW,CAACG,WAAW,EAAEO,eAAe,CAAC;EAEtHb,QAAQ,CAACV,WAAW,CAAC2B,WAAW,CAAC,CAAC;EAClCE,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACL,WAAW,CAAC,CAAC;AAC7D,CAAC;AAED,MAAMT,gBAAgB,GAAGA,CAACN,MAAM,EAAEC,WAAW,EAAEH,QAAQ,EAAEI,QAAQ,KAAK;EAClE,MAAMK,UAAU,GAAGC,WAAW,CAACN,QAAQ,EAAEF,MAAM,CAACI,WAAW,CAAC,CAACK,IAAI,CAACC,KAAK,CAAC,CAAC;EAEzE,MAAM,CAACE,WAAW,CAAC,GAAGL,UAAU,CAACM,MAAM,CAACb,MAAM,CAACc,KAAK,EAAE,CAAC,CAAC;EACxDP,UAAU,CAACM,MAAM,CAACZ,WAAW,CAACa,KAAK,EAAE,CAAC,EAAEF,WAAW,CAAC;EAEpD,MAAMG,WAAW,GAAGC,cAAc,CAACd,QAAQ,EAAEF,MAAM,CAACI,WAAW,EAAEG,UAAU,CAAC;EAE5ET,QAAQ,CAACV,WAAW,CAAC2B,WAAW,CAAC,CAAC;EAClCE,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACL,WAAW,CAAC,CAAC;AAC7D,CAAC;AAED,MAAMP,WAAW,GAAGA,CAACN,QAAQ,EAAEmB,EAAE,KAAK;EAClC,OAAOnB,QAAQ,CAACoB,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACF,EAAE,KAAKA,EAAE,CAAC;AAClD,CAAC;AAED,MAAML,cAAc,GAAGA,CAACd,QAAQ,EAAEsB,QAAQ,EAAEjB,UAAU,EAAEkB,aAAa,EAAEd,eAAe,KAAK;EACvF,MAAMI,WAAW,GAAGb,QAAQ,CAACwB,GAAG,CAAEH,IAAI,IAAK;IACvC,IAAIA,IAAI,CAACF,EAAE,KAAKG,QAAQ,EAAE;MACtB,OAAO;QAAE,GAAGD,IAAI;QAAEd,IAAI,EAAEF;MAAW,CAAC;IACxC;IACA,IAAIgB,IAAI,CAACF,EAAE,KAAKI,aAAa,EAAE;MAC3B,OAAO;QAAE,GAAGF,IAAI;QAAEd,IAAI,EAAEE;MAAgB,CAAC;IAC7C;IACA,OAAOY,IAAI;EACf,CAAC,CAAC;EAEF,OAAOR,WAAW;AACtB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}